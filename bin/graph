#!/usr/bin/env -S deno run --allow-read --allow-env=HOME --allow-net
import {createGraph} from 'jsr:@deno/graph'
import * as path from 'jsr:@std/path'
import {parseArgs} from 'jsr:@std/cli/parse-args'

const {
  _: [file],
  scope: kind = 'codeOnly',
} = parseArgs(Deno.args)

if (!file || typeof file !== 'string') {
  throw new Error('No file received, specify file E.G.: `graph example.txt`')
}

const hasPermissions = 'permissions' in Deno
let readRequested = false
const netRequested = new Set<string>()

async function requestRead(path: URL): Promise<void> {
  if (readRequested || !hasPermissions) {
    return
  }
  readRequested = true
  await Deno.permissions.request({name: 'read', path})
}

async function requestNet(host: string): Promise<void> {
  if (!hasPermissions || netRequested.has(host)) {
    return
  }
  netRequested.add(host)
  await Deno.permissions.request({name: 'net', host})
}

export async function load(specifier: string) {
  const url = new URL(specifier)
  try {
    switch (url.protocol) {
      case 'file:': {
        await requestRead(url)
        const content = await Deno.readTextFile(url)
        return {
          kind: 'module',
          specifier,
          content,
        }
      }
      case 'http:':
      case 'https:': {
        await requestNet(url.host)
        const response = await fetch(url)
        if (response.status !== 200) {
          // ensure the body is read as to not leak resources
          await response.arrayBuffer()

          // check if it's a redirect
          if (response.status >= 300 && response.status < 400) {
            const location = response.headers.get('location')
            if (location != null) {
              return {
                kind: 'redirect',
                specifier: location,
              }
            }
          }

          return undefined
        }
        const content = await response.text()
        const headers: Record<string, string> = {}
        for (const [key, value] of response.headers) {
          headers[key.toLowerCase()] = value
        }
        return {
          kind: 'module',
          specifier: response.url,
          headers,
          content,
        }
      }
      default:
        return undefined
    }
  } catch {
    return undefined
  }
}

const base = path.toFileUrl(path.resolve(file))

const graph = await createGraph(base.toString(), {
  kind,
  defaultJsxImportSource: 'react-jsx',
  defaultJsxImportSourceTypes: 'react-jsx',
  jsxImportSourceModule: 'react-jsx',
  load,
})
console.log(JSON.stringify(graph, null, 2))
