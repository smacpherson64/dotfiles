[
  "Run `size` to get human readable sizes of folders and files",
  "Use `tab` top open a new tab in a terminal",
  "`killport -p port` kills all processes on a port",
  "Use `@ts-expect-error` instead of `@ts-ignore`",
  "Encapsulate work performed. Pass data instead of hiding. Opens for composition.",
  "Quality requires focus",
  "`grab HEAD /path/to/file` gets a file at a specific branch / commit.",
  "Dependencies are complexity (think Rich Hickey) (John Ousterhout) PoSD book",
  "Programming is thinking creatively and organizing your thoughts (John Ousterhout) PoSD book",
  "Isolate complexity if possible, make it testable",
  "Hard vs easy is relative, complex vs simple is based on interwoven",
  "Helpful question: How much does someone need to know to use this?",
  "One measure of complexity: How many changes are required to make the change?",
  "Simple means more focused code",
  "Unknown unknowns are dangerous, they are like hidden traps in a temple",
  "Keep side effects obvious",
  "Dependencies & obscurity cause complexity, keep both obvious.",
  "Balance getting it done, with planning, planning is an investment and getting it done makes the revenue.",
  "Technical debt is time, without design often things are faster now, but longer later",
  "Minimize dependencies when possible",
  "Abstractions is shaping a concept for a context, E.G. don't need to know the whole network stack to use fetch",
  "Abstractions should have smaller interfaces than using the code directly",
  "Keep data obvious",
  "Focus on data and how it changes",
  "Hide work performed not data, hiding data removes function composition",
  "Don't force users to know all features and options",
  "Hiding data depends on context, prefer not to hide if possible",
  "Helpful question: - What is the smallest interface that covers my needs?",
  "Specialization should be encapsulated outside the system",
  "Reduce special cases and branches",
  "Simple interface is better than simple implementation",
  "Focus is the key to simplicity. Keep modules, functions, classes, etc focused.",
  "Design multiple times, the first time is rarely right",
  "Make a cons and pros list, (the order is intentional)",
  "Iterate on the design, fail fast, learn and change.",
  "Document and comment code",
  "If users must read code to use an abstraction it isn't helping",
  "Keep names precise",
  "If naming is hard the design _might_ not be good.",
  "Be consistent in naming",
  "Documentation (including comments & types) driven development is a thing, think before writing",
  "Design must be intentional, things tend towards chaos (blah / entropy)",
  "Colocate - keep documentation, tests, and comments close",
  "keep things obvious, hidden things are traps that hurt",
  "tests provide confidence",
  "Minimize what matters, what is the most important thing?",
  "Spend energy on what matters",
  "design keeps things maintainable",
  "Code Reviews - are there parts you find yourself re-reading? Why business logic or general logic? Comment?",
  "Code Reviews - What passes through your review, thorough or not, is your responsibility.",
  "Code Reviews - Focus on the code, not the developer.",
  "Code Reviews - Leave your ego at the door.",
  "Code Reviews - You are not your code, you are not your work.",
  "You can choose how you think and your attitude, no one elses.",
  "Classes should _produce_ useful and meaningful objects.",
  "Go fast using leverage not shortcuts. I donâ€™t want to go fast at the expense of the future.",
  "Don't forget hope, everyone needs hope.",
  "Remember: When my mind is overwhelmed, I reject things quickly.",
  "Remember: My aim for perfection sucks the joy out of things. (Why do I do this?)",
  "Remember: Build the world you want to live in.",
  "When I make abstractions or components, ask myself what I am abstracting and why?",
  "Give people agency (Enable people to do things when possible) - Joel Sawyer",
  "Experience is key to prediction. (Musicians know what to go to next faster than they can think because they have practiced it).",
  "Fail Gracefully (if it will make you angry is there a way to have a less traumatic failure?) Is there a backup, is there a recovery plan? Has the plan been tested? Could it fail?",
  "Know your foundations (example rust would need to know burrowing, swift weak self)",
  "Anxiety often results in bad decisions",
  "Humans are not robots",
  "Our emotions affect our judgement and information gathering",
  "Emotions help us make decisions in the unknown - without them we would be overwhelmed.",
  "Remember what events just happened",
  "Turbulence bypasses normal processing and training, careful.",
  "Emotions do not cause actions, they adjust how we perceive",
  "Dopamine makes you want something even if you don't like it",
  "Liking something and the motivation to seek it are two different things",
  "Strong gut health and intestinal lining protects brain health",
  "Gut feeling is affected by environmental factors",
  "Stress encourages risk taking for a better situation.",
  "Is your gut feeling positive or negative? How intense is it?",
  "css variables in tailwind: `className=\"[--css-variable:100%]\"`",
  "tailwindcss snappy transition `ease-[cubic-bezier(0.82,-0.21,0,1.26)]`"
]
